import logging
import os
import sqlite3
from datetime import datetime, date
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from fpdf import FPDF

API_TOKEN = os.getenv("BOT_TOKEN")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ Render —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN
ADMIN_ID = 1096930119

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã
conn = sqlite3.connect("database.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS marriages (
        user1 TEXT,
        user2 TEXT,
        married_at TEXT
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS gifts (
        sender TEXT,
        receiver TEXT,
        gifted_at TEXT
    )
""")
conn.commit()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
pending = {}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class Broadcast(StatesGroup):
    waiting_message = State()

# –ö–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
help_kb = ReplyKeyboardMarkup(resize_keyboard=True)
help_kb.add(KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –∏ –∫–Ω–æ–ø–∫–∏ "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
@dp.message_handler(commands=['start'])
@dp.message_handler(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
async def send_welcome(message: types.Message):
    user = message.from_user
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)",
        (user.id, user.username, user.first_name)
    )
    conn.commit()

    text = (
        "üíç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LoveRegistrarBot!\n\n"
        "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "üíç /marry @username ‚Äî –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±—Ä–∞–∫\n"
        "üíû /my_spouse ‚Äî –£–∑–Ω–∞—Ç—å —Å–≤–æ–µ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞\n"
        "üìú /certificate ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ\n"
        "üíî /divorce ‚Äî –†–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –±—Ä–∞–∫\n\n"
        "üìÖ /anniversary ‚Äî –ì–æ–¥–æ–≤—â–∏–Ω–∞ (–¥–Ω–µ–π –≤–º–µ—Å—Ç–µ)\n"
        "üìñ /marriage_story ‚Äî –ò—Å—Ç–æ—Ä–∏—è –±—Ä–∞–∫–∞\n"
        "üñº /download_certificate ‚Äî –°–∫–∞—á–∞—Ç—å PDF-—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ\n"
        "üéÅ /gift ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä—É\n"
        "üßæ /my_marriage_profile ‚Äî –ë—Ä–∞—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        "üëë /broadcast ‚Äî –†–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
    )
    await message.reply(text, reply_markup=help_kb)

# –ö–æ–º–∞–Ω–¥–∞ /broadcast ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
@dp.message_handler(commands=['broadcast'])
async def broadcast_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.reply("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–º–µ–Ω–∞"))
    await Broadcast.waiting_message.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(lambda m: m.text == "–û—Ç–º–µ–Ω–∞", state=Broadcast.waiting_message)
async def broadcast_cancel(message: types.Message, state: FSMContext):
    await message.reply("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=help_kb)
    await state.finish()

@dp.message_handler(state=Broadcast.waiting_message, content_types=types.ContentTypes.TEXT)
async def process_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await state.finish()
        return
    text = message.text
    success = 0
    failed = 0

    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    for (uid,) in users:
        try:
            await bot.send_message(uid, text)
            success += 1
        except:
            failed += 1

    await message.reply(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {failed}", reply_markup=help_kb)
    await state.finish()

# –ö–æ–º–∞–Ω–¥–∞ /marry
@dp.message_handler(commands=['marry'])
async def marry(message: types.Message):
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].startswith('@'):
        await message.reply("‚ùó –ü—Ä–∞–≤–∏–ª—å–Ω–æ: /marry @username", reply_markup=help_kb)
        return

    proposer = message.from_user
    partner_username = parts[1][1:].lower()

    if proposer.username is None:
        await message.reply("‚ùó –£ –≤–∞—Å –Ω–µ—Ç @username, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram.", reply_markup=help_kb)
        return
    if proposer.username.lower() == partner_username:
        await message.reply("üòÖ –ù–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ.", reply_markup=help_kb)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)",
        (proposer.id, proposer.username.lower(), proposer.first_name)
    )
    conn.commit()

    pending[partner_username] = {
        "proposer_id": proposer.id,
        "proposer_username": proposer.username.lower()
    }

    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üíñ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{partner_username}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"decline:{partner_username}")
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–∏—Å–∞–ª –ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä –±–æ—Ç—É
    cursor.execute("SELECT user_id FROM users WHERE username=?", (partner_username,))
    partner_row = cursor.fetchone()

    if partner_row:
        partner_id = partner_row[0]
        try:
            await bot.send_message(
                partner_id,
                f"@{partner_username}, @{proposer.username} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–µ–±–µ –±—Ä–∞–∫! üíç",
                reply_markup=markup
            )
            await message.reply(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{partner_username}.", reply_markup=help_kb)
        except:
            await message.reply(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ @{partner_username}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.", reply_markup=help_kb)
    else:
        await message.reply(f"‚ùó @{partner_username} –µ—â—ë –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–∞—Ç—å /start.", reply_markup=help_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–∞–∑–∞
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('accept:'))
async def accept(callback: types.CallbackQuery):
    partner = callback.from_user
    partner_username = partner.username.lower()
    data = pending.get(partner_username)
    if not data or data["proposer_username"] is None:
        await callback.message.edit_text("‚ùó –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ.")
        return

    proposer_id = data["proposer_id"]
    proposer_username = data["proposer_username"]
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–∞–∫ –≤ –±–∞–∑–µ
    cursor.execute(
        "INSERT INTO marriages (user1, user2, married_at) VALUES (?, ?, ?)",
        (proposer_username, partner_username, timestamp)
    )
    cursor.execute(
        "INSERT INTO marriages (user1, user2, married_at) VALUES (?, ?, ?)",
        (partner_username, proposer_username, timestamp)
    )
    conn.commit()

    await callback.message.edit_text(f"üéâ @{proposer_username} –∏ @{partner_username} —Ç–µ–ø–µ—Ä—å –ø–∞—Ä–∞! üéâ", reply_markup=help_kb)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
    cursor.execute(
        "INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)",
        (partner.id, partner_username, partner.first_name)
    )
    conn.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    try:
        await bot.send_message(proposer_id, f"üéâ –í—ã —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ —Å @{partner_username}! –ü–æ–∂–µ–ª–∞–µ–º –≤–∞–º —Å—á–∞—Å—Ç—å—è üíñ", reply_markup=help_kb)
    except:
        pass
    try:
        await bot.send_message(partner.id, f"üéâ –í—ã —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ —Å @{proposer_username}! –ü–æ–∂–µ–ª–∞–µ–º –≤–∞–º —Å—á–∞—Å—Ç—å—è üíñ", reply_markup=help_kb)
    except:
        pass

    # –£–¥–∞–ª—è–µ–º –∏–∑ pending
    del pending[partner_username]

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('decline:'))
async def decline(callback: types.CallbackQuery):
    partner = callback.from_user
    partner_username = partner.username.lower()
    data = pending.get(partner_username)
    if not data:
        await callback.message.edit_text("‚ùó –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ.")
        return

    proposer_username = data["proposer_username"]
    await callback.message.edit_text(f"üíî @{partner_username} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ @{proposer_username}.", reply_markup=help_kb)
    del pending[partner_username]

# –ö–æ–º–∞–Ω–¥–∞ /my_spouse
@dp.message_handler(commands=['my_spouse'])
async def my_spouse(message: types.Message):
    user = message.from_user.username.lower()
    cursor.execute("SELECT user2 FROM marriages WHERE user1=?", (user,))
    row = cursor.fetchone()
    if row:
        await message.reply(f"üíç –¢—ã –≤ –±—Ä–∞–∫–µ —Å @{row[0]}.", reply_markup=help_kb)
    else:
        await message.reply("üò¢ –£ —Ç–µ–±—è –Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞.", reply_markup=help_kb)

# –ö–æ–º–∞–Ω–¥–∞ /certificate (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ)
@dp.message_handler(commands=['certificate'])
async def certificate(message: types.Message):
    user = message.from_user.username.lower()
    cursor.execute("SELECT user2, married_at FROM marriages WHERE user1=?", (user,))
    row = cursor.fetchone()
    if row:
        partner, married_at = row
        await message.reply(f"üìú –°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ:\n@{user} ‚ù§Ô∏è @{partner}\n–î–∞—Ç–∞ –±—Ä–∞–∫–∞: {married_at}", reply_markup=help_kb)
    else:
        await message.reply("üíî –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—Ä–∞–∫–∞.", reply_markup=help_kb)

# –ö–æ–º–∞–Ω–¥–∞ /divorce
@dp.message_handler(commands=['divorce'])
async def divorce(message: types.Message):
    user = message.from_user.username.lower()
    cursor.execute("SELECT user2 FROM marriages WHERE user1=?", (user,))
    row = cursor.fetchone()
    if row:
        partner = row[0]
        cursor.execute("DELETE FROM marriages WHERE (user1=? AND user2=?) OR (user1=? AND user2=?)",
                       (user, partner, partner, user))
        conn.commit()
        await message.reply(f"üíî –ë—Ä–∞–∫ –º–µ–∂–¥—É @{user} –∏ @{partner} —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç.", reply_markup=help_kb)
    else:
        await message.reply("‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –±—Ä–∞–∫–∞.", reply_markup=help_kb)

# –ö–æ–º–∞–Ω–¥–∞ /anniversary ‚Äî —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –±—Ä–∞–∫–µ
@dp.message_handler(commands=['anniversary'])
async def anniversary(message: types.Message):
    user = message.from_user.username.lower()
    cursor.execute("SELECT married_at, user2 FROM marriages WHERE user1=?", (user,))
    row = cursor.fetchone()
    if not row:
        await message.reply("üò¢ –£ —Ç–µ–±—è –Ω–µ—Ç –±—Ä–∞–∫–∞.", reply_markup=help_kb)
        return

    married_at_str, partner = row
    married_at = datetime.strptime(married_at_str, "%Y-%m-%d %H:%M").date()
    days = (date.today() - married_at).days
    await message.reply(f"üíû –í—ã –≤ –±—Ä–∞–∫–µ —Å @{partner} —É–∂–µ {days} –¥–Ω{'–µ–π' if days % 10 in (2,3,4) and days % 100 not in (12,13,14) else '–µ–π'}.", reply_markup=help_kb)

# –ö–æ–º–∞–Ω–¥–∞ /marriage_story ‚Äî –∏—Å—Ç–æ—Ä–∏—è –±—Ä–∞–∫–∞
@dp.message_handler(commands=['marriage_story'])
async def marriage_story(message: types.Message):
    user = message.from_user.username.lower()
    cursor.execute("SELECT user2, married_at FROM marriages WHERE user1=?", (user,))
    row = cursor.fetchone()
    if not row:
        await message.reply("üò¢ –£ —Ç–µ–±—è –Ω–µ—Ç –±—Ä–∞–∫–∞.", reply_markup=help_kb)
        return

    partner, married_at = row
    married_date = datetime.strptime(married_at, "%Y-%m-%d %H:%M")
    days = (date.today() - married_date.date()).days
    await message.reply(
        f"üìñ –ò—Å—Ç–æ—Ä–∏—è:\n–í—ã —Å @{partner} –ø–æ–∂–µ–Ω–∏–ª–∏—Å—å {married_date.strftime('%d.%m.%Y –≤ %H:%M')}.\n"
        f"üíï –í–º–µ—Å—Ç–µ: {days} –¥–Ω{'–µ–π' if days % 10 in (2,3,4) and days % 100 not in (12,13,14) else '–µ–π'}.",
        reply_markup=help_kb
    )

# –ö–æ–º–∞–Ω–¥–∞ /download_certificate ‚Äî PDF-—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ
@dp.message_handler(commands=['download_certificate'])
async def download_certificate(message: types.Message):
    user = message.from_user.username.lower()
    cursor.execute("SELECT user2, married_at FROM marriages WHERE user1=?", (user,))
    row = cursor.fetchone()
    if not row:
        await message.reply("üò¢ –£ —Ç–µ–±—è –Ω–µ—Ç –±—Ä–∞–∫–∞.", reply_markup=help_kb)
        return

    partner, married_at = row
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, "–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –±—Ä–∞–∫–µ", ln=True, align="C")
    pdf.ln(10)
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, f"{datetime.strptime(married_at, '%Y-%m-%d %H:%M').strftime('%d.%m.%Y %H:%M')}", ln=True, align="C")
    pdf.ln(10)
    pdf.set_font("Arial", size=14)
    pdf.cell(0, 10, f"{message.from_user.full_name} ‚ù§Ô∏è {partner}", ln=True, align="C")

    filename = f"certificate_{user}_{partner}.pdf"
    pdf.output(filename)

    await message.reply_document(InputFile(filename))
    os.remove(filename)

# –ö–æ–º–∞–Ω–¥–∞ /gift ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä—É (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1 –≤ –¥–µ–Ω—å)
@dp.message_handler(commands=['gift'])
async def gift(message: types.Message):
    sender = message.from_user.username.lower()
    cursor.execute("SELECT user2 FROM marriages WHERE user1=?", (sender,))
    row = cursor.fetchone()
    if not row:
        await message.reply("üò¢ –£ —Ç–µ–±—è –Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞.", reply_markup=help_kb)
        return

    receiver = row[0]
    today_str = date.today().isoformat()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–¥–∞—Ä–æ–∫ —Å–µ–≥–æ–¥–Ω—è
    cursor.execute("""
        SELECT COUNT(*) FROM gifts
        WHERE sender=? AND receiver=? AND gifted_at=?
    """, (sender, receiver, today_str))
    count_today = cursor.fetchone()[0]
    if count_today >= 1:
        await message.reply("‚ùó –°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –¥–∞—Ä–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.", reply_markup=help_kb)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∞—Ä–æ–∫
    cursor.execute("INSERT INTO gifts (sender, receiver, gifted_at) VALUES (?, ?, ?)", (sender, receiver, today_str))
    conn.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä—É
    cursor.execute("SELECT user_id FROM users WHERE username=?", (receiver,))
    receiver_row = cursor.fetchone()
    if receiver_row:
        try:
            await bot.send_message(receiver_row[0], f"üéÅ @{sender} –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫! üíñ", reply_markup=help_kb)
            await message.reply(f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω @{receiver}!", reply_markup=help_kb)
        except:
            await message.reply(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ @{receiver}.", reply_markup=help_kb)
    else:
        await message.reply(f"‚ùó –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ @{receiver} –≤ –±–∞–∑–µ.", reply_markup=help_kb)

# –ö–æ–º–∞–Ω–¥–∞ /my_marriage_profile ‚Äî –±—Ä–∞—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
@dp.message_handler(commands=['my_marriage_profile'])
async def marriage_profile(message: types.Message):
    user = message.from_user.username.lower()
    cursor.execute("SELECT user2, married_at FROM marriages WHERE user1=?", (user,))
    row = cursor.fetchone()
    if not row:
        await message.reply("üò¢ –£ —Ç–µ–±—è –Ω–µ—Ç –±—Ä–∞–∫–∞.", reply_markup=help_kb)
        return

    partner, married_at = row
    married_date = datetime.strptime(married_at, "%Y-%m-%d %H:%M")
    days = (date.today() - married_date.date()).days

    # –°—á–∏—Ç–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    cursor.execute("SELECT COUNT(*) FROM gifts WHERE receiver=?", (user,))
    gifts_received = cursor.fetchone()[0]

    profile_text = (
        f"üë§ –¢—ã: @{user}\n"
        f"üíû –°—É–ø—Ä—É–≥: @{partner}\n"
        f"üìÖ –°–≤–∞–¥—å–±–∞: {married_date.strftime('%d.%m.%Y')}\n"
        f"üïí –í–º–µ—Å—Ç–µ: {days} –¥–Ω{'–µ–π' if days % 10 in (2,3,4) and days % 100 not in (12,13,14) else '–µ–π'}\n"
        f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {gifts_received}"
    )
    await message.reply(profile_text, reply_markup=help_kb)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
