import logging
import os
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 1096930119

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

conn = sqlite3.connect("database.db")
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS marriages (user1 TEXT, user2 TEXT, married_at TEXT)")
cursor.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT)")
conn.commit()

pending = {}

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user = message.from_user
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)",
                   (user.id, user.username, user.first_name))
    conn.commit()
    await message.reply(
        "üíç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LoveRegistrarBot!\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/marry @user ‚Äì –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        "/certificate ‚Äì —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ\n"
        "/divorce ‚Äì —Ä–∞–∑–≤–æ–¥\n"
        "/my_spouse ‚Äì –∫—Ç–æ —Ç–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä?\n"
        "/admin ‚Äì —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞"
    )

@dp.message_handler(commands=['marry'])
async def marry(message: types.Message):
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].startswith('@'):
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /marry @username")
        return
    proposer = message.from_user.username
    partner = parts[1][1:]
    if proposer == partner:
        await message.reply("üòÖ –ù–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ")
        return

    pending[partner] = proposer
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üíñ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{proposer}"))
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"decline_{proposer}"))
    await message.reply(f"@{partner}, @{proposer} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–µ–±–µ –±—Ä–∞–∫! üíç", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('accept_'))
async def accept(callback: types.CallbackQuery):
    partner = callback.from_user.username
    proposer = callback.data.split('_')[1]
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")

    cursor.execute("INSERT INTO marriages (user1, user2, married_at) VALUES (?, ?, ?)", (proposer, partner, timestamp))
    cursor.execute("INSERT INTO marriages (user1, user2, married_at) VALUES (?, ?, ?)", (partner, proposer, timestamp))
    conn.commit()

    await callback.message.edit_text(f"üéâ @{proposer} –∏ @{partner} —Ç–µ–ø–µ—Ä—å –ø–∞—Ä–∞!")

    # –ê–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    cursor.execute("SELECT user_id FROM users WHERE username=?", (proposer,))
    proposer_id_row = cursor.fetchone()
    if proposer_id_row:
        try:
            await bot.send_message(proposer_id_row[0], f"üéâ –í—ã —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ —Å @{partner}!\n–ü–æ–∂–µ–ª–∞–µ–º –≤–∞–º —Å—á–∞—Å—Ç—å—è üíñ")
        except:
            pass

    try:
        await bot.send_message(callback.from_user.id, f"üéâ –í—ã —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ —Å @{proposer}!\n–ü–æ–∂–µ–ª–∞–µ–º –≤–∞–º —Å—á–∞—Å—Ç—å—è üíñ")
    except:
        pass

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('decline_'))
async def decline(callback: types.CallbackQuery):
    proposer = callback.data.split('_')[1]
    await callback.message.edit_text(f"üíî @{callback.from_user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ @{proposer}")

@dp.message_handler(commands=['my_spouse'])
async def my_spouse(message: types.Message):
    user = message.from_user.username
    cursor.execute("SELECT user2 FROM marriages WHERE user1=?", (user,))
    row = cursor.fetchone()
    if row:
        await message.reply(f"üíç –¢—ã –≤ –±—Ä–∞–∫–µ —Å @{row[0]}")
    else:
        await message.reply("üò¢ –£ —Ç–µ–±—è –Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞")

@dp.message_handler(commands=['certificate'])
async def certificate(message: types.Message):
    user = message.from_user.username
    cursor.execute("SELECT user2, married_at FROM marriages WHERE user1=?", (user,))
    row = cursor.fetchone()
    if row:
        await message.reply(f"üìú –°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ:\n@{user} ‚ù§Ô∏è @{row[0]}\n–î–∞—Ç–∞ –±—Ä–∞–∫–∞: {row[1]}")
    else:
        await message.reply("üíî –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—Ä–∞–∫–∞")

@dp.message_handler(commands=['divorce'])
async def divorce(message: types.Message):
    user = message.from_user.username
    cursor.execute("SELECT user2 FROM marriages WHERE user1=?", (user,))
    row = cursor.fetchone()
    if row:
        partner = row[0]
        cursor.execute("DELETE FROM marriages WHERE user1 IN (?, ?)", (user, partner))
        conn.commit()
        await message.reply(f"üíî –ë—Ä–∞–∫ –º–µ–∂–¥—É @{user} –∏ @{partner} —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç")
    else:
        await message.reply("‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –±—Ä–∞–∫–∞")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
