import logging
import os
import sqlite3
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = 1096930119

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

conn = sqlite3.connect("database.db")
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS marriages (user1 TEXT, user2 TEXT, married_at TEXT)")
cursor.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT)")
conn.commit()

pending = {}

class Broadcast(StatesGroup):
    waiting_message = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user = message.from_user
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)",
                   (user.id, user.username, user.first_name))
    conn.commit()
    await message.reply(
        "üíç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LoveRegistrarBot!\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/marry @user ‚Äì –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n"
        "/certificate ‚Äì —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ\n"
        "/divorce ‚Äì —Ä–∞–∑–≤–æ–¥\n"
        "/my_spouse ‚Äì –∫—Ç–æ —Ç–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä?\n"
        "/broadcast ‚Äì —Ä–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"
    )

@dp.message_handler(commands=['broadcast'])
async def broadcast_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.reply("‚úâÔ∏è –í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await Broadcast.waiting_message.set()

@dp.message_handler(state=Broadcast.waiting_message, content_types=types.ContentTypes.TEXT)
async def process_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    text = message.text
    success = 0
    failed = 0
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    for (uid,) in users:
        try:
            await bot.send_message(uid, text)
            success += 1
        except:
            failed += 1
    await message.reply(f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {failed}")
    await state.finish()

@dp.message_handler(commands=['marry'])
async def marry(message: types.Message):
    parts = message.text.split()
    if len(parts) != 2 or not parts[1].startswith('@'):
        await message.reply("‚ùó –§–æ—Ä–º–∞—Ç: /marry @username")
        return
    proposer = message.from_user
    partner_username = parts[1][1:]

    if proposer.username == partner_username:
        await message.reply("üòÖ –ù–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ")
        return

    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)",
                   (proposer.id, proposer.username, proposer.first_name))
    conn.commit()

    pending[partner_username] = {
        "proposer_id": proposer.id,
        "proposer_username": proposer.username
    }

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üíñ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{partner_username}"))
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"decline_{partner_username}"))

    cursor.execute("SELECT user_id FROM users WHERE username=?", (partner_username,))
    partner_row = cursor.fetchone()

    if partner_row:
        try:
            await bot.send_message(partner_row[0], f"@{partner_username}, @{proposer.username} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–µ–±–µ –±—Ä–∞–∫! üíç", reply_markup=markup)
            await message.reply(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{partner_username}")
        except:
            await message.reply(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ @{partner_username}.")
    else:
        await message.reply(f"‚ùó @{partner_username} –µ—â—ë –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É. –ü–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –Ω–∞–∂–∞—Ç—å /start.")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('accept_'))
async def accept(callback: types.CallbackQuery):
    partner = callback.from_user
    proposer_username = callback.data.split('_')[1]

    proposer_data = pending.get(partner.username)
    if not proposer_data:
        await callback.message.edit_text("‚ùó –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ.")
        return

    proposer_id = proposer_data["proposer_id"]
    proposer_name = proposer_data["proposer_username"]
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")

    cursor.execute("INSERT INTO marriages (user1, user2, married_at) VALUES (?, ?, ?)", (proposer_name, partner.username, timestamp))
    cursor.execute("INSERT INTO marriages (user1, user2, married_at) VALUES (?, ?, ?)", (partner.username, proposer_name, timestamp))
    conn.commit()

    await callback.message.edit_text(f"üéâ @{proposer_name} –∏ @{partner.username} —Ç–µ–ø–µ—Ä—å –ø–∞—Ä–∞!")

    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)",
                   (partner.id, partner.username, partner.first_name))
    conn.commit()

    try:
        await bot.send_message(proposer_id, f"üéâ –í—ã —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ —Å @{partner.username}!\n–ü–æ–∂–µ–ª–∞–µ–º –≤–∞–º —Å—á–∞—Å—Ç—å—è üíñ")
    except:
        pass

    try:
        await bot.send_message(partner.id, f"üéâ –í—ã —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ —Å @{proposer_name}!\n–ü–æ–∂–µ–ª–∞–µ–º –≤–∞–º —Å—á–∞—Å—Ç—å—è üíñ")
    except:
        pass

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('decline_'))
async def decline(callback: types.CallbackQuery):
    proposer_username = callback.data.split('_')[1]
    await callback.message.edit_text(f"üíî @{callback.from_user.username} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ @{proposer_username}")

@dp.message_handler(commands=['my_spouse'])
async def my_spouse(message: types.Message):
    user = message.from_user.username
    cursor.execute("SELECT user2 FROM marriages WHERE user1=?", (user,))
    row = cursor.fetchone()
    if row:
        await message.reply(f"üíç –¢—ã –≤ –±—Ä–∞–∫–µ —Å @{row[0]}")
    else:
        await message.reply("üò¢ –£ —Ç–µ–±—è –Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞")

@dp.message_handler(commands=['certificate'])
async def certificate(message: types.Message):
    user = message.from_user.username
    cursor.execute("SELECT user2, married_at FROM marriages WHERE user1=?", (user,))
    row = cursor.fetchone()
    if row:
        await message.reply(f"üìú –°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ:\n@{user} ‚ù§Ô∏è @{row[0]}\n–î–∞—Ç–∞ –±—Ä–∞–∫–∞: {row[1]}")
    else:
        await message.reply("üíî –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—Ä–∞–∫–∞")

@dp.message_handler(commands=['divorce'])
async def divorce(message: types.Message):
    user = message.from_user.username
    cursor.execute("SELECT user2 FROM marriages WHERE user1=?", (user,))
    row = cursor.fetchone()
    if row:
        partner = row[0]
        cursor.execute("DELETE FROM marriages WHERE user1 IN (?, ?)", (user, partner))
        conn.commit()
        await message.reply(f"üíî –ë—Ä–∞–∫ –º–µ–∂–¥—É @{user} –∏ @{partner} —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç")
    else:
        await message.reply("‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç –±—Ä–∞–∫–∞")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
